%================== Exercise 1. print_staircase =======================================

print_staircase() =>
    N = 3,
    println("\nUsing iteration"),
    itr_print_staircase(N),

    println("\nUsing tail recursive"),
    tr_print_staircase(N, 1).

% -------- Using Iteration --------

itr_print_staircase(N) =>
    TotalLines = 2 * N,
    foreach(Line in 1..TotalLines)
        Layer = (Line + 1) // 2,
        Spaces = (N - Layer) * 4,
        print_spaces(Spaces),
        if Line mod 2 == 1 then
            print_horizontal_line(Layer)
        else
            print_vertical_line(Layer)
        end
    end,
    print_spaces(0),  
    print_horizontal_line(N).

% -------- Using Tail Recursive --------

tr_print_staircase(N, CurrentLayer) =>
    if CurrentLayer > N then
        print_spaces(0),
        print_horizontal_line(N)
    else
        Spaces = (N - CurrentLayer) * 4,
        print_spaces(Spaces),
        print_horizontal_line(CurrentLayer),

        print_spaces(Spaces),
        print_vertical_line(CurrentLayer),

        tr_print_staircase(N, CurrentLayer + 1)
    end.

% -------- Print Spaces --------
print_spaces(0) => true.
print_spaces(N) =>
    print(' '),
    print_spaces(N - 1).

% -------- Draw Lines --------
print_horizontal_line(Steps) =>
    Out = "",
    foreach(I in 1..Steps)
        Out := Out ++ "+---"
    end,
    Out := Out ++ "+",
    println(Out).

print_vertical_line(Steps) =>
    Out = "",
    foreach(I in 1..Steps)
        Out := Out ++ "|   "
    end,
    Out := Out ++ "|",
    println(Out).

% ================== Exercise 2. Pascal's Triangle ====================================

% factorial(0) = 1.
% factorial(N) = N * factorial(N - 1) => N > 0.

combination(N, K) = factorial(N) // (factorial(K) * factorial(N - K)).

% --------- Iteration --------- 
pascals_triangle_iter(N) =>
    foreach(Row in 0..N-1)
        Out = "",
        foreach(Col in 0..Row)
            Val = combination(Row, Col),
            Out := Out ++ to_string(Val) ++ " "
        end,
        println(Out)
    end.

% --------- Tail Reccursion --------- 

print_row(I, J, Acc) =>
    if J > I then
        println(Acc)
    else
        Val = combination(I, J),
        NewAcc = Acc ++ to_string(Val) ++ " ",
        print_row(I, J + 1, NewAcc)
    end.


pascals_triangle_tail(N) =>
    pascals_triangle_tail(N, 0).

pascals_triangle_tail(N, I) =>
    if I >= N then
        true
    else
        print_row(I, 0, ""),
        pascals_triangle_tail(N, I + 1)
    end.

% --------- Normal Recursion --------- 

print_row_recursive(I, J) =>
    if J > I then
        true
    else
        Val = combination(I, J),
        printf("%w ", Val),
        print_row_recursive(I, J + 1)
    end.

pascals_triangle_recursive(N, I) =>
    if I >= N then
        true
    else
        print_row_recursive(I, 0),
        println(''),
        pascals_triangle_recursive(N, I + 1)
    end.

% --------- Main ---------
main =>
    println("=== Exercise 1. print_staircase ==="),
    print_staircase(),

    println("=== Exercise 2. Pascal's Triangle ==="),
    println("Pascal's Triangle Iteration:"),
    pascals_triangle_iter(4),

    println("\nPascal's Triangle Tail Recursion:"),
    pascals_triangle_tail(4),

    println("\nPascal's Triangle Normal Recursion:"),
    pascals_triangle_recursive(4, 0).
